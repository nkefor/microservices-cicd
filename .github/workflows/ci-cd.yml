name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod

env:
  AWS_REGION: us-east-1
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.us-east-1.amazonaws.com

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api-gateway, product-service, auth-service, order-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Set up Node.js (for Node services)
        if: matrix.service == 'api-gateway' || matrix.service == 'product-service'
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: services/${{ matrix.service }}/package-lock.json

      - name: Set up Python (for Python services)
        if: matrix.service == 'auth-service' || matrix.service == 'order-service'
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: services/${{ matrix.service }}/requirements.txt

      - name: Install Node.js dependencies
        if: matrix.service == 'api-gateway' || matrix.service == 'product-service'
        working-directory: services/${{ matrix.service }}
        run: npm ci

      - name: Install Python dependencies
        if: matrix.service == 'auth-service' || matrix.service == 'order-service'
        working-directory: services/${{ matrix.service }}
        run: pip install -r requirements.txt

      - name: Run Node.js tests
        if: matrix.service == 'api-gateway' || matrix.service == 'product-service'
        working-directory: services/${{ matrix.service }}
        run: npm test || true

      - name: Run Python tests
        if: matrix.service == 'auth-service' || matrix.service == 'order-service'
        working-directory: services/${{ matrix.service }}
        run: python -m pytest tests/ || true

  build-and-push:
    name: Build and Push Docker Images
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        service: [api-gateway, auth-service, product-service, order-service]

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set image tag
        id: image-tag
        run: |
          echo "tag=${{ github.run_number }}-${GITHUB_SHA::7}" >> $GITHUB_OUTPUT

      - name: Build Docker image
        working-directory: services/${{ matrix.service }}
        run: |
          docker build \
            -t ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ steps.image-tag.outputs.tag }} \
            -t ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:latest \
            .

      - name: Push Docker image to ECR
        run: |
          docker push ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:${{ steps.image-tag.outputs.tag }}
          docker push ${{ env.ECR_REGISTRY }}/${{ matrix.service }}:latest

      - name: Save image tag
        run: echo "${{ steps.image-tag.outputs.tag }}" > image-tag.txt

      - name: Upload image tag artifact
        uses: actions/upload-artifact@v4
        with:
          name: image-tag-${{ matrix.service }}
          path: image-tag.txt

  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'dev' }}
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name == 'push' || github.event_name == 'workflow_dispatch'
    environment:
      name: ${{ github.event.inputs.environment || 'dev' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Download image tag artifact
        uses: actions/download-artifact@v4
        with:
          name: image-tag-api-gateway

      - name: Read image tag
        id: image-tag
        run: echo "tag=$(cat image-tag.txt)" >> $GITHUB_OUTPUT

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Ansible
        run: |
          pip install ansible boto3 botocore

      - name: Configure SSH key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/microservices-cicd
          chmod 600 ~/.ssh/microservices-cicd

      - name: Run Ansible deployment
        working-directory: ansible
        env:
          ANSIBLE_HOST_KEY_CHECKING: False
        run: |
          ansible-playbook -i inventory/hosts.ini playbooks/site.yml \
            -e "environment=${{ github.event.inputs.environment || 'dev' }}" \
            -e "image_tag=${{ steps.image-tag.outputs.tag }}" \
            -e "ecr_registry=${{ env.ECR_REGISTRY }}" \
            -e "jwt_secret=${{ secrets.JWT_SECRET }}"

      - name: Health check
        run: |
          echo "Waiting for services to start..."
          sleep 30

          # Get Load Balancer DNS from Terraform output
          cd infrastructure/terraform/environments/${{ github.event.inputs.environment || 'dev' }}
          LB_DNS=$(aws elbv2 describe-load-balancers \
            --query "LoadBalancers[?contains(LoadBalancerName, 'microservices-cicd')].DNSName" \
            --output text | head -1)

          echo "Load Balancer DNS: $LB_DNS"

          echo "Checking API Gateway health..."
          curl -f http://${LB_DNS}/health

          echo "Checking service health..."
          curl -f http://${LB_DNS}/health/services

          echo "Deployment successful!"

      - name: Create deployment summary
        run: |
          echo "## Deployment Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Environment:** ${{ github.event.inputs.environment || 'dev' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Image Tag:** ${{ steps.image-tag.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${GITHUB_SHA::7}" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "All services deployed successfully!" >> $GITHUB_STEP_SUMMARY
